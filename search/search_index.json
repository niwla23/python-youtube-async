{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python-Youtube's documentation! A Python wrapper around for YouTube Data API. Author: IkarosKun merle.liukun@gmail.com Introduction With the YouTube Data API, you can add a variety of YouTube features to your application. Use the API to upload videos, manage playlists and subscriptions, update channel settings, and more. This library provides a Python interface for the YouTube DATA API . Library could work on Python 3.6+. Tips This library only have DATA API , Not contains Analytics API and Live Streaming API .","title":"Introduction"},{"location":"#welcome-to-python-youtubes-documentation","text":"A Python wrapper around for YouTube Data API. Author: IkarosKun merle.liukun@gmail.com","title":"Welcome to Python-Youtube's documentation!"},{"location":"#introduction","text":"With the YouTube Data API, you can add a variety of YouTube features to your application. Use the API to upload videos, manage playlists and subscriptions, update channel settings, and more. This library provides a Python interface for the YouTube DATA API . Library could work on Python 3.6+. Tips This library only have DATA API , Not contains Analytics API and Live Streaming API .","title":"Introduction"},{"location":"CHANGELOG/","text":"Changelog Version 0.8.1 Deprecation Detail at: https://developers.google.com/youtube/v3/revision_history#may-12,-2021 Remove channel resource in brandingSettings for channel. Remove localizations,targeting resource and some snippet resource for channelSection. Remove tags in snippet for playlist. Broken Change Methods get_channel_sections_by_channel , get_channel_section_by_id has remove parameter hl . Version 0.8.0 Broken Change Modify the auth flow methods. What's New add python3.9 tests New docs Version 0.7.0 What's New Add api methods for members and membership levels Add more examples for api Add fields for playlist item api fix some. Version 0.6.1 What's New Remove deprecated api. Version 0.6.0 What's New Provide remain get apis. like activities, captions, channel_sections, i18n, video_abuse_report_reason, search resource and so on. You can see the README _ to get more detail for those api. Version 0.5.3 What's New Provide the page token parameter to skip data have retrieved. This for follow api methods api . get_playlists () api . get_playlist_items () api . get_videos_by_chart () api . get_videos_by_myrating () api . get_comment_threads () api . get_comments () api . get_subscription_by_channel () api . get_subscription_by_me () example In[1]: r = api.get_subscription_by_channel(channel_id=\"UCAuUUnT6oDeKwE6v1NGQxug\", limit=5, count=None, page_token=\"CAUQAA\") In[2]:r.prevPageToken Out[2]: 'CAUQAQ' Version 0.5.2 What's New Now you can use authorized access token to get your subscriptions. You can to the demo A demo for get my subscription to see simple usage. Or you can see the subscriptions usage docs. #43 add api for get my subscriptions #41 add api for channel subscriptions Version 0.5.1 What's New Now some apis can get all target items just by one method call. For example, you can get playlist's all items by follow call In [1]: r = api.get_playlist_items(playlist_id=\"PLWz5rJ2EKKc_xXXubDti2eRnIKU0p7wHd\", parts=[\"id\", \"snippet\"], count=None) In [2]: r.pageInfo Out[2]: PageInfo(totalResults=73, resultsPerPage=50) In [3]: len(r.items) Out[4]: 73 You can see the README to find which methods support this. Version 0.5.0 Broken Change Now introduce new model ApiResponse representing the response from youtube, so previous usage has been invalidated. You need to read the docs README to get the simple new usage. What's New Split some method into multiple usage, for example get video has been split three methods: api.get_video_by_id() api.get_videos_by_chart() api.get_videos_by_myrating()","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#version-081","text":"","title":"Version 0.8.1"},{"location":"CHANGELOG/#deprecation","text":"Detail at: https://developers.google.com/youtube/v3/revision_history#may-12,-2021 Remove channel resource in brandingSettings for channel. Remove localizations,targeting resource and some snippet resource for channelSection. Remove tags in snippet for playlist.","title":"Deprecation"},{"location":"CHANGELOG/#broken-change","text":"Methods get_channel_sections_by_channel , get_channel_section_by_id has remove parameter hl .","title":"Broken Change"},{"location":"CHANGELOG/#version-080","text":"","title":"Version 0.8.0"},{"location":"CHANGELOG/#broken-change_1","text":"Modify the auth flow methods.","title":"Broken Change"},{"location":"CHANGELOG/#whats-new","text":"add python3.9 tests New docs","title":"What's New"},{"location":"CHANGELOG/#version-070","text":"","title":"Version 0.7.0"},{"location":"CHANGELOG/#whats-new_1","text":"Add api methods for members and membership levels Add more examples for api Add fields for playlist item api fix some.","title":"What's New"},{"location":"CHANGELOG/#version-061","text":"","title":"Version 0.6.1"},{"location":"CHANGELOG/#whats-new_2","text":"Remove deprecated api.","title":"What's New"},{"location":"CHANGELOG/#version-060","text":"","title":"Version 0.6.0"},{"location":"CHANGELOG/#whats-new_3","text":"Provide remain get apis. like activities, captions, channel_sections, i18n, video_abuse_report_reason, search resource and so on. You can see the README _ to get more detail for those api.","title":"What's New"},{"location":"CHANGELOG/#version-053","text":"","title":"Version 0.5.3"},{"location":"CHANGELOG/#whats-new_4","text":"Provide the page token parameter to skip data have retrieved. This for follow api methods api . get_playlists () api . get_playlist_items () api . get_videos_by_chart () api . get_videos_by_myrating () api . get_comment_threads () api . get_comments () api . get_subscription_by_channel () api . get_subscription_by_me () example In[1]: r = api.get_subscription_by_channel(channel_id=\"UCAuUUnT6oDeKwE6v1NGQxug\", limit=5, count=None, page_token=\"CAUQAA\") In[2]:r.prevPageToken Out[2]: 'CAUQAQ'","title":"What's New"},{"location":"CHANGELOG/#version-052","text":"","title":"Version 0.5.2"},{"location":"CHANGELOG/#whats-new_5","text":"Now you can use authorized access token to get your subscriptions. You can to the demo A demo for get my subscription to see simple usage. Or you can see the subscriptions usage docs. #43 add api for get my subscriptions #41 add api for channel subscriptions","title":"What's New"},{"location":"CHANGELOG/#version-051","text":"","title":"Version 0.5.1"},{"location":"CHANGELOG/#whats-new_6","text":"Now some apis can get all target items just by one method call. For example, you can get playlist's all items by follow call In [1]: r = api.get_playlist_items(playlist_id=\"PLWz5rJ2EKKc_xXXubDti2eRnIKU0p7wHd\", parts=[\"id\", \"snippet\"], count=None) In [2]: r.pageInfo Out[2]: PageInfo(totalResults=73, resultsPerPage=50) In [3]: len(r.items) Out[4]: 73 You can see the README to find which methods support this.","title":"What's New"},{"location":"CHANGELOG/#version-050","text":"","title":"Version 0.5.0"},{"location":"CHANGELOG/#broken-change_2","text":"Now introduce new model ApiResponse representing the response from youtube, so previous usage has been invalidated. You need to read the docs README to get the simple new usage.","title":"Broken Change"},{"location":"CHANGELOG/#whats-new_7","text":"Split some method into multiple usage, for example get video has been split three methods: api.get_video_by_id() api.get_videos_by_chart() api.get_videos_by_myrating()","title":"What's New"},{"location":"authorization/","text":"If you want to get some more data for your channel. You need provide the authorization first. So, this doc show how to do authorize. Prerequisite At the beginning. You must know what is authorization. You can see some information at the Official Documentation . Then you need have an app with the Access scopes approval by YouTube. If everything goes well. Now let do a simple authorize with python-youtube-async library. Get authorization url Suppose now we want to get user's permission to manage his youtube account. For the python-youtube-async library, the default scopes are: https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/userinfo.profile You can get more scope information at Access scopes . And We set the default redirect url is https://localhost/ . Now we can begin do the follows step. Initialize the api instance with you app credentials In [1]: from pyyoutube import Api In [2]: api = Api(client_id=\"you client id\", client_secret=\"you client secret\") In [3]: api.get_authorization_url() Out[3]: ('https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=client_id&redirect_uri=https%3A%2F%2Flocalhost%2F&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&state=PyYouTube&access_type=offline&prompt=select_account', 'PyYouTube') Now you get the authorization url, you just need copy the link, and open browser to paste the link, click the enter bar. Do authorization If you enter the url. you will see this. Now you need to chose or enter you google account with youtube. If your app have not got the approval from youtube. You will get an warning from youtube. If you have been approved, you will see the next image show directly. For now, you need to click the button Advanced , then click the Go to Python-YouTube (unsafe) . Now you can get a window to give permissions. click the blue button allow to give the permission. Then you will get a Connection Error, don't worry. This just because we set the redirect link to localhost . Retrieve access token Now you need to copy the full url in the browser address bar. Then back to you console. In [4]: token = api.generate_access_token(authorization_response=\"the whole url\") In [5]: token Out[5]: AccessToken(access_token='access token', expires_in=3600, token_type='Bearer') now you have got your access token to visit your self data. Get your data For example, you can get your playlists. In [6]: playlists = api.get_playlists(mine=True) In [7]: playlists.items Out[7]: [Playlist(kind='youtube#playlist', id='PLBaidt0ilCManGDIKr8UVBFZwN_UvMKvS'), Playlist(kind='youtube#playlist', id='PLBaidt0ilCMbUdj0EppB710c_X5OuCP2g')] get your self profile. In [8]: profile = api.get_profile() In [9]: profile Out[9]: UserProfile(id='110109920178558006671', name='ikaros-life') Tips If you have some confuse. you need to read the Authorize Requests first.","title":"Authorization"},{"location":"authorization/#prerequisite","text":"At the beginning. You must know what is authorization. You can see some information at the Official Documentation . Then you need have an app with the Access scopes approval by YouTube. If everything goes well. Now let do a simple authorize with python-youtube-async library.","title":"Prerequisite"},{"location":"authorization/#get-authorization-url","text":"Suppose now we want to get user's permission to manage his youtube account. For the python-youtube-async library, the default scopes are: https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/userinfo.profile You can get more scope information at Access scopes . And We set the default redirect url is https://localhost/ . Now we can begin do the follows step. Initialize the api instance with you app credentials In [1]: from pyyoutube import Api In [2]: api = Api(client_id=\"you client id\", client_secret=\"you client secret\") In [3]: api.get_authorization_url() Out[3]: ('https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=client_id&redirect_uri=https%3A%2F%2Flocalhost%2F&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&state=PyYouTube&access_type=offline&prompt=select_account', 'PyYouTube') Now you get the authorization url, you just need copy the link, and open browser to paste the link, click the enter bar.","title":"Get authorization url"},{"location":"authorization/#do-authorization","text":"If you enter the url. you will see this. Now you need to chose or enter you google account with youtube. If your app have not got the approval from youtube. You will get an warning from youtube. If you have been approved, you will see the next image show directly. For now, you need to click the button Advanced , then click the Go to Python-YouTube (unsafe) . Now you can get a window to give permissions. click the blue button allow to give the permission. Then you will get a Connection Error, don't worry. This just because we set the redirect link to localhost .","title":"Do authorization"},{"location":"authorization/#retrieve-access-token","text":"Now you need to copy the full url in the browser address bar. Then back to you console. In [4]: token = api.generate_access_token(authorization_response=\"the whole url\") In [5]: token Out[5]: AccessToken(access_token='access token', expires_in=3600, token_type='Bearer') now you have got your access token to visit your self data.","title":"Retrieve access token"},{"location":"authorization/#get-your-data","text":"For example, you can get your playlists. In [6]: playlists = api.get_playlists(mine=True) In [7]: playlists.items Out[7]: [Playlist(kind='youtube#playlist', id='PLBaidt0ilCManGDIKr8UVBFZwN_UvMKvS'), Playlist(kind='youtube#playlist', id='PLBaidt0ilCMbUdj0EppB710c_X5OuCP2g')] get your self profile. In [8]: profile = api.get_profile() In [9]: profile Out[9]: UserProfile(id='110109920178558006671', name='ikaros-life') Tips If you have some confuse. you need to read the Authorize Requests first.","title":"Get your data"},{"location":"getting_started/","text":"This doc is a simple tutorial to show how to use this library to get data from YouTube DATA API. You can get the whole description for YouTube API at YouTube API Reference . Prerequisite At the beginning. You need to create a Google Project by your google account. Every new account has 12 project to cost. Create your project Click the Select a project-> NEW PROJECT to create a new project to use our library. Fill the basic info to finish created. Enable YouTube DATA API service Once the project created, the browser will redirect project home page. Then click the \u2261\u2261 symbol on the left top. Chose the APIs & Services tab. You will see follow info. Click the + ENABLE APIS AND SERVICES symbol. And input YouTube DATA API to search. Then chose the YouTube DATA API item. Then click the ENABLE blue button. Now the service has been activated. Create credentials To use this API, you may need credentials. Click 'Create credentials' to get started. You need to fill in some information to create credentials. Just chose YouTube DATA API v3 , Other non-UI (e.g. cron job, daemon) and Public data . Then click the blue button What credentials do I need? to create. Now you have generated one api key. Use this key. You can retrieve public data for YouTube data by our library In [1]: import pyyoutube In [2]: api = pyyoutube.Api(api_key='your api key') If you want to get some examples to see, check out the examples . If you have an opens source application using python-youtube, send me a link, and I am very happy to add a link to it here. But if you want to get user data by OAuth. You need create the credential for OAuth client ID . And get more info at next page for Authorization .","title":"Getting Started"},{"location":"getting_started/#prerequisite","text":"At the beginning. You need to create a Google Project by your google account. Every new account has 12 project to cost.","title":"Prerequisite"},{"location":"getting_started/#create-your-project","text":"Click the Select a project-> NEW PROJECT to create a new project to use our library. Fill the basic info to finish created.","title":"Create your project"},{"location":"getting_started/#enable-youtube-data-api-service","text":"Once the project created, the browser will redirect project home page. Then click the \u2261\u2261 symbol on the left top. Chose the APIs & Services tab. You will see follow info. Click the + ENABLE APIS AND SERVICES symbol. And input YouTube DATA API to search. Then chose the YouTube DATA API item. Then click the ENABLE blue button. Now the service has been activated.","title":"Enable YouTube DATA API service"},{"location":"getting_started/#create-credentials","text":"To use this API, you may need credentials. Click 'Create credentials' to get started. You need to fill in some information to create credentials. Just chose YouTube DATA API v3 , Other non-UI (e.g. cron job, daemon) and Public data . Then click the blue button What credentials do I need? to create. Now you have generated one api key. Use this key. You can retrieve public data for YouTube data by our library In [1]: import pyyoutube In [2]: api = pyyoutube.Api(api_key='your api key') If you want to get some examples to see, check out the examples . If you have an opens source application using python-youtube, send me a link, and I am very happy to add a link to it here. But if you want to get user data by OAuth. You need create the credential for OAuth client ID . And get more info at next page for Authorization .","title":"Create credentials"},{"location":"installation/","text":"This library supports Python 3.6 and newer. Dependencies These following distributions will be installed automatically when installing Python-Youtube. requests : is an elegant and simple HTTP library for Python, built for human beings. Requests-OAuthlib : uses the Python Requests and OAuthlib libraries to provide an easy-to-use Python interface for building OAuth1 and OAuth2 clients. isodate : implements ISO 8601 date, time and duration parsing. Installation You can install this library from PyPI $ pip install --upgrade python-youtube Also, you can build this library from source code $ git clone https://github.com/niwla23/python-youtube-async.git $ cd python-youtube $ make env $ make build Testing If you have been installing the requirements use pipenv install --dev . You can use following command to test the code $ make test","title":"Installation"},{"location":"installation/#dependencies","text":"These following distributions will be installed automatically when installing Python-Youtube. requests : is an elegant and simple HTTP library for Python, built for human beings. Requests-OAuthlib : uses the Python Requests and OAuthlib libraries to provide an easy-to-use Python interface for building OAuth1 and OAuth2 clients. isodate : implements ISO 8601 date, time and duration parsing.","title":"Dependencies"},{"location":"installation/#installation","text":"You can install this library from PyPI $ pip install --upgrade python-youtube Also, you can build this library from source code $ git clone https://github.com/niwla23/python-youtube-async.git $ cd python-youtube $ make env $ make build","title":"Installation"},{"location":"installation/#testing","text":"If you have been installing the requirements use pipenv install --dev . You can use following command to test the code $ make test","title":"Testing"}]}